---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: &name sonarr
    app.kubernetes.io/instance: *name
    app.kubernetes.io/component: *name
    app.kubernetes.io/part-of: *name
    k8s-app: *name
  annotations:
    backup.velero.io/backup-volumes-excludes: media
    backup.velero.io/backup-volumes: config
  name: *name
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: *name
      app.kubernetes.io/instance: *name
      app.kubernentes.io/component: *name
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: *name
        app.kubernetes.io/instance: *name
        app.kubernentes.io/component: *name
        setGateway: "true"
    spec:
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: "OnRootMismatch"
        supplementalGroups:
          - 100
      containers:
        - name: sonarr
          image: ghcr.io/onedr0p/sonarr-develop:4.0.4.1668
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 2Gi
            requests:
              memory: 250Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 568
            runAsGroup: 568
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          ports:
            - name: http
              containerPort: 8080
          env:
            - name: TZ
              value: ${LOCAL_TZ}
            - name: SONARR__PORT
              value: "8080"
            - name: SONARR_INSTANCE_NAME
              value: Sonarr
            - name: SONARR__LOG_LEVEL
              value: info
            - name: SONARR__APPLICATION_URL
              value: "https://sonarr.${SECRET_DOMAIN}"
          envFrom:
            - secretRef:
                name: sonarr-secret
          livenessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 2
          startupProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 2
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /media
              name: media
        - name: exportarr
          image: ghcr.io/onedr0p/exportarr:v2.0.1
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 568
            runAsGroup: 568
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 64Mi
          args:
            - sonarr
          env:
            - name: PORT
              value: "8081"
            - name: URL
              value: http://localhost:8080
            - name: ENABLE_ADDITIONAL_METRICS
              value: "true"
            - name: APIKEY
              valueFrom:
                secretKeyRef:
                  name: sonarr-secret
                  key: SONARR__API_KEY
          ports:
            - name: metrics
              containerPort: 8081
          livenessProbe:
            httpGet:
              path: /healthz
              port: metrics
            failureThreshold: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: metrics
            failureThreshold: 5
            periodSeconds: 10
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: sonarr
        - name: media
          nfs:
            server: ${NFS_SERVER}
            path: /mnt/rusty/media
